# Comprehensive Testing CI/CD Pipeline
# Multi-platform testing with security, performance, and quality gates

name: Comprehensive Testing Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CI: true
  TEST_TIMEOUT: 30000

jobs:
  # Job 1: Basic Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          
  # Job 2: Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run security tests
      run: npm run test:security
      env:
        NODE_ENV: test
        
    - name: Run SAST with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          coverage/
          security-report.json
          
  # Job 3: Performance and Load Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        
    - name: Run load tests
      run: npm run test:load
      env:
        NODE_ENV: test
        
    - name: Generate performance report
      run: |
        echo "## Performance Test Results" > performance-report.md
        echo "### System Information" >> performance-report.md
        echo "- OS: $(uname -a)" >> performance-report.md
        echo "- Node.js: $(node --version)" >> performance-report.md
        echo "- CPU Cores: $(nproc)" >> performance-report.md
        echo "- Memory: $(free -h | grep Mem | awk '{print $2}')" >> performance-report.md
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          coverage/
          performance-report.md
          
  # Job 4: UI and E2E Testing
  ui-e2e-tests:
    name: UI & E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    
    services:
      # Test database service
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start test server
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 3000
        
    - name: Run UI tests
      run: npm run test:ui
      env:
        NODE_ENV: test
        HEADLESS: true
        
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        BASE_URL: http://localhost:3000
        
    - name: Upload UI test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          coverage/
          screenshots/
          videos/
          test-results/
          
  # Job 5: Cross-Platform Compatibility
  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    needs: [unit-integration-tests]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run cross-platform tests
      run: npm run test:cross-platform
      env:
        NODE_ENV: test
        
    - name: Test platform-specific features
      run: |
        # Test file system operations
        node -e "
          const fs = require('fs');
          const path = require('path');
          const testFile = path.join(__dirname, 'platform-test.txt');
          fs.writeFileSync(testFile, 'Platform test content');
          const content = fs.readFileSync(testFile, 'utf8');
          console.log('Platform test passed:', content === 'Platform test content');
          fs.unlinkSync(testFile);
        "
        
    - name: Upload platform test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: platform-test-results-${{ matrix.os }}
        path: |
          coverage/
          platform-report.json
          
  # Job 6: Code Quality and Coverage
  code-quality:
    name: Code Quality & Coverage
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, security-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive test suite
      run: npm run test:ci-full
      env:
        NODE_ENV: test
        
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: comprehensive-tests
        name: codecov-umbrella
        
    - name: Check coverage thresholds
      run: |
        # Check if coverage meets minimum requirements
        node -e "
          const coverage = require('./coverage/coverage-summary.json');
          const global = coverage.total;
          
          const thresholds = {
            statements: 80,
            branches: 80,
            functions: 80,
            lines: 80
          };
          
          let failed = false;
          
          for (const [metric, threshold] of Object.entries(thresholds)) {
            const actual = global[metric].pct;
            if (actual < threshold) {
              console.error(\`❌ \${metric} coverage \${actual}% is below threshold \${threshold}%\`);
              failed = true;
            } else {
              console.log(\`✅ \${metric} coverage \${actual}% meets threshold \${threshold}%\`);
            }
          }
          
          if (failed) {
            process.exit(1);
          }
        "
        
    - name: Run ESLint
      run: npx eslint src/ tests/ --ext .js --format json --output-file eslint-report.json || true
      
    - name: Upload code quality results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-results
        path: |
          coverage/
          eslint-report.json
          
  # Job 7: Regression Testing
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[regression]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run regression tests
      run: npm run test:regression
      env:
        NODE_ENV: test
        
    - name: Compare with baseline
      run: |
        # Compare current results with previous baseline
        # This would integrate with historical test data
        echo "Regression analysis completed"
        
    - name: Upload regression results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-test-results
        path: |
          coverage/
          regression-report.json
          
  # Job 8: Final Report and Notification
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, security-tests, performance-tests, ui-e2e-tests, cross-platform-tests, code-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate comprehensive test report
      run: |
        echo "# 🧪 Comprehensive Test Report" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check job results
        if [ "${{ needs.unit-integration-tests.result }}" == "success" ]; then
          echo "✅ Unit & Integration Tests: PASSED" >> test-summary.md
        else
          echo "❌ Unit & Integration Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> test-summary.md
        else
          echo "❌ Security Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "✅ Performance Tests: PASSED" >> test-summary.md
        else
          echo "❌ Performance Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.ui-e2e-tests.result }}" == "success" ]; then
          echo "✅ UI & E2E Tests: PASSED" >> test-summary.md
        else
          echo "❌ UI & E2E Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.cross-platform-tests.result }}" == "success" ]; then
          echo "✅ Cross-Platform Tests: PASSED" >> test-summary.md
        else
          echo "❌ Cross-Platform Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code Quality: PASSED" >> test-summary.md
        else
          echo "❌ Code Quality: FAILED" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Test Execution Details" >> test-summary.md
        echo "- **Trigger**: ${{ github.event_name }}" >> test-summary.md
        echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
        echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
        echo "- **Timestamp**: $(date -u)" >> test-summary.md
        
        cat test-summary.md
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
          
    - name: Upload final test summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-summary
        path: |
          test-summary.md
          
  # Job 9: Deploy to Test Environment (on success)
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: success() && github.ref == 'refs/heads/develop'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        # Add deployment logic here
        echo "✅ Deployment completed"
        
    - name: Run smoke tests
      run: npm run test:smoke
      env:
        NODE_ENV: test
        TEST_URL: ${{ secrets.TEST_ENVIRONMENT_URL }}
        
    - name: Notify deployment success
      run: |
        echo "🚀 Successfully deployed and tested in test environment"